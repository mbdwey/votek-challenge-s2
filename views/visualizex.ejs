<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/visualize.css' />
    <script src="//d3js.org/d3.v3.min.js"></script>
    <script src="/javascripts/d3-tree.js"></script>
  </head>
  <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>



<script type="text/javascript">

// d3.json("x.json", function(error, flare) {
//   console.log('the new',parseTree(flare));
// });
// return;
var margin = {top: 20, right: 120, bottom: 20, left: 120},
    width = 960 - margin.right - margin.left,
    height = 800 - margin.top - margin.bottom;

var i = 0,
    duration = 750,
    root;

var tree = d3.layout.tree()
    .size([height, width]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("x.json", function(error, flare) {
  if (error) throw error;
  console.log('the flare',flare);
  flare  = parseTree(flare);
  root = flare;
  root.x0 = height / 2;
  root.y0 = 0;

  function collapse(d) {
    if (d.children) {
      d._children = d.children;
      d._children.forEach(collapse);
      d.children = null;
    }
  }

  root.children.forEach(collapse);
  update(root);
});

d3.select(self.frameElement).style("height", "800px");




function findItemByID(item,index)
{
  return item.id == this.id;
}

function getItemIndexByID(items,itemID) {
  return items.findIndex(findItemByID,{id:itemID});
}
/*
  check previous item order or set it to false so we could recompute it later
 */
function computeItemOrder(items,itemID) {

  var itemIndex = getItemIndexByID(items,itemID);
  if (itemIndex >= 0)
  {
    return items[itemIndex].order+1;
  }
  else
  {
    return false;
  }
}

function getParentFromPrivous(items,itemID) {
  if ((privousItemIndex = getItemIndexByID(items,itemID)) >= 0)
  {
    if (items[privousItemIndex].previous_sibling_id)
    {
      return getParentFromPrivous(items,items[privousItemIndex].previous_sibling_id);
    }
    else
    {
      return items[privousItemIndex].parent_id;
    }
  }
  else
  {
    return false;
  }
}
/*
  this method assumes that ID are not trusted identifier to identify childes and parents and try check every item on the list to build the tree base on previous_sibling_id and next_node_id
 */
function parseTree(data)
{
  var parsedTree = {};
  var prepared = [];
  parsedTree.children = [];
  parsedTree.tree_title = (!!data.tree_title) ? data.tree_title : 'Imported Tree - '+(new Date().toUTCString());

  function prepare(item)
  {
    console.log('start ',item);

    item.order = (item.previous_sibling_id == '') ? 0 : computeItemOrder(prepared,item.previous_sibling_id);
    // check it item already cerated from next linker
    if ((currentItemIndex = getItemIndexByID(prepared,item.id)) >= 0)
    {
      for (var key in item) { prepared[currentItemIndex][key] = item[key]; }
    }
    else
    {
      // prepared.push(item);
      // currentItemIndex = getItemIndexByID(prepared,item.id);
      currentItemIndex = prepared.push(item)-1;
    }

    // console.log('currentItemIndex',currentItemIndex,prepared);
    // set parent id
    if (item.next_node_id)
    {
      if ((nextItemIndex = getItemIndexByID(prepared,item.next_node_id)) >= 0)
      {
        prepared[nextItemIndex].parent_id = currentItemIndex
      }
      else
      {
        prepared.push({id:item.next_node_id,parent_id:currentItemIndex});
      }
    }
    // get parent from previous
    if (item.previous_sibling_id)
    {
      prepared[currentItemIndex].parent_id = getParentFromPrivous(prepared,item.previous_sibling_id);
    }
    // set mast of no preivous
    if (typeof(prepared[currentItemIndex].parent_id) == 'undefined')
    {
      prepared[currentItemIndex].parent_id = 0;
    }
  }

  function nestChiled(node,parent,parent_id) {
    console.log('parent',parent,'node',node);
    if (!parent.children)
    {
      parent.children = [];
    }
    if (node.parent_id != parent_id)
    {
      return nestChiled(node,prepared[parent_id],node.parent_id);
    }
    else
    {
      return parent.children.push({title:node.title,id:node.id});
    }
  }

  function nest(node) {
    if (!parsedTree[node.order] && node.parent_id == 0)
    {
      parsedTree.children[node.order] = [];
      // nestChiled()
    }
    if (node.parent_id == 0)
    {
      // nestChiled()
      return parsedTree.children[node.order].push({title:node.title,id:node.id});
    }
    else
    {
      parsedTree.children[node.parent_id] = nestChiled(node,parsedTree,node.parent_id);
      return;
    }



    // if (node.parent_id == 0)
    // {
    //   parsedTree.children[node.order] = node;
    // }
    // else
    // {
    //   parsedTree.children[node.parent_id][node.order] = node;
    // }
  }

  if(data.tree_nodes)
  {
    data.tree_nodes.forEach(prepare);
    prepared.forEach(nest);
  }
  console.log('prepared',prepared);
  console.log('parsedTree',parsedTree);
  return parsedTree;
}

</script>
  </body>
</html>
